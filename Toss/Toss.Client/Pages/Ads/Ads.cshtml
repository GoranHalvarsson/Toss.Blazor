@page "/ads"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
<h1>Ads</h1>
<div class="alert alert-info">
    Here you can create an ads that will be displayed for 30 sec on a user browser.
    This add will be displayed as a Toss flagged "Ad".
    <ul>
        <li>Every display of your ad cost 1 cts.</li>
        <li>Every click on your ad costs 3 cts.</li>
        <li>You buy X€ of credit for one ad.</li>
        <li>The ads (with remaining credits) are picked randomly.</li>
        <li>You cannot pick who will see your ad and you canot now who clicked on it.</li>
        <li>For any information / support requests please send a Toss with the hashtag #tossadsupport, we are watching it.</li>
    </ul>
</div>

<form method="post">
    <div class="form-group">
        <label for="Title">Title</label>
        <input for="Title" class="form-control" bind="@createAdCommand.Title" />
        <ValidationError FieldName="Title" Errors="@_errors" />
    </div>
    <div class="form-group">
        <label for="Text">Text</label>
        <input for="Text" class="form-control" bind="@createAdCommand.Text" />
        <ValidationError FieldName="Text" Errors="@_errors" />
    </div>
    <div class="form-group">
        <label for="Link">Link</label>
        <input for="Link" class="form-control" bind="@createAdCommand.Link" />
        <ValidationError FieldName="Link" Errors="@_errors" />
    </div>
    <div class="form-group">
        <label for="Picture">Picture</label>
        <input for="Picture" type="file" class="form-control" accept="image/*" id="fileUpload" value="@valueFIle" />
        <ValidationError FieldName="ImageBase64" Errors="@_errors" />
        <ValidationError FieldName="ImageMimeType" Errors="@_errors" />
    </div>
    <button type="button" onclick="@CreateAd" class="btn btn-default">Save</button>
</form>

@functions{
    string valueFIle;
    ElementRef fileInput;
    CreateAdCommand createAdCommand = new CreateAdCommand();
    Dictionary<string, List<string>> _errors = new Dictionary<string, List<string>>();

    async Task CreateAd()
    {
        var data = await JsInterop.GetFileData("fileUpload");
        createAdCommand.ImageBase64 = data.Content;
        createAdCommand.ImageMimeType = data.MimeType;
        await ClientFactory.Create("/api/ads/create")
            .OnBadRequest<Dictionary<string, List<string>>>(e => _errors = e)
            .OnOK("Your ad was created successfully")
            .Post(createAdCommand);
    }
}
